#---
#apiVersion: v1
#kind: Namespace
#metadata:
#  name: myapp
#...
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: webphotobook
#  namespace: myapp
  labels:
    app: webphotobook
spec:
  replicas: 1
  selector:
    matchLabels:
      app: webphotobook
  template:
    metadata:
      labels:
        app: webphotobook
    spec:
      containers:
      - name: webphotobook
        image: rmahiquesuse/webphotobook_demo:0.2.42
        ports:
        - containerPort: 5000
...
## Service example using a loadbalancer
#---
#apiVersion: v1
#kind: Service
#metadata:
#  name: webphotobook
##  namespace: myapp
#spec:
#  type: LoadBalancer
#  selector:
#    app: webphotobook
#  ports:
#    - protocol: TCP
#      port: 5000
#      targetPort: 5000
#      name: webphotobook-5000-tcp
#...
## Another service example
#---
#apiVersion: v1
#kind: Service
#metadata:
#  name: webphotobook
##  namespace: myapp
#spec:
#  clusterIP: None
#  clusterIPs:
#    - None
#  internalTrafficPolicy: Cluster
#  ipFamilies:
#    - IPv4
#  ipFamilyPolicy: SingleStack
#  ports:
#    - name: webphotobook-port
#      port: 5000
#      protocol: TCP
#      targetPort: 5000
#  selector:
#    app: webphotobook
#  sessionAffinity: None
#  type: ClusterIP
#...
## Example Ingress rule to expose it
#---
#apiVersion: networking.k8s.io/v1
#kind: Ingress
#metadata:
#  name: webphotobook
##  namespace: myapp
#spec:
#  defaultBackend:
#    service:
#      name: webphotobook
#      port:
#        number: 5000
#  rules:
#    - host: webphotobook.ingress.<mydomain here, ie. demo.lab>
#      http:
#        paths:
#          - backend:
#              service:
#                name: webphotobook
#                port:
#                  number: 5000
#            path: /
#            pathType: Prefix
#...
